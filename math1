{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d776f373-05c6-452d-921b-7eff58d02f77",
   "metadata": {},
   "source": [
    "$ \n",
    "\\[\n",
    "\\begin{bmatrix}\n",
    "2 & 4 \\\\\n",
    "6 & 2\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "x \\\\\n",
    "y\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "7\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "A =\n",
    "\\begin{bmatrix}\n",
    "2 & 4 \\\\\n",
    "6 & 2\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "X =\n",
    "\\begin{bmatrix}\n",
    "x \\\\\n",
    "y\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "B =\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "7\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "AX = B \\quad \\Rightarrow \\quad X = A^{-1}B\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "A^{-1} =\n",
    "\\frac{1}{(2)(2) - (6)(4)}\n",
    "\\begin{bmatrix}\n",
    "2 & -4 \\\\\n",
    "-6 & 2\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "2 & -4 \\\\\n",
    "-6 & 2\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "X =\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "2 & -4 \\\\\n",
    "-6 & 2\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "7\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "2\\cdot 5 + (-4)\\cdot 7 \\\\\n",
    "-6\\cdot 5 + 2\\cdot 7\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "-18 \\\\\n",
    "-16\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "X =\n",
    "\\begin{bmatrix}\n",
    "0.9 \\\\\n",
    "0.8\n",
    "\\end{bmatrix}\n",
    "\\quad \\Rightarrow \\quad\n",
    "x = 0.9,\\; y = 0.8\n",
    "\\]\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8f1689a-2100-4334-a0c3-7d2a511f3a7a",
   "metadata": {},
   "source": [
    "$ \\[\n",
    "\\text{주어진 연립방정식:}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "\\begin{cases}\n",
    "2x + 4y = 5 \\\\\n",
    "6x + 2y = 7\n",
    "\\end{cases}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "\\text{이를 행렬 형태로 쓰면: }\n",
    "\\quad\n",
    "\\begin{bmatrix}\n",
    "2 & 4 \\\\\n",
    "6 & 2\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "x \\\\\n",
    "y\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "7\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "AX = B, \\quad X = A^{-1}B\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "A =\n",
    "\\begin{bmatrix}\n",
    "2 & 4 \\\\\n",
    "6 & 2\n",
    "\\end{bmatrix},\n",
    "\\quad\n",
    "B =\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "7\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "\\det(A) = (2)(2) - (6)(4) = 4 - 24 = -20\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "A^{-1} =\n",
    "\\frac{1}{\\det(A)}\n",
    "\\begin{bmatrix}\n",
    "2 & -4 \\\\\n",
    "-6 & 2\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "2 & -4 \\\\\n",
    "-6 & 2\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "X = A^{-1}B =\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "2 & -4 \\\\\n",
    "-6 & 2\n",
    "\\end{bmatrix}\n",
    "\\begin{bmatrix}\n",
    "5 \\\\\n",
    "7\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "=\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "2\\cdot 5 + (-4)\\cdot 7 \\\\\n",
    "-6\\cdot 5 + 2\\cdot 7\n",
    "\\end{bmatrix}\n",
    "=\n",
    "\\frac{1}{-20}\n",
    "\\begin{bmatrix}\n",
    "-18 \\\\\n",
    "-16\n",
    "\\end{bmatrix}\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "X =\n",
    "\\begin{bmatrix}\n",
    "0.9 \\\\\n",
    "0.8\n",
    "\\end{bmatrix}\n",
    "\\quad \\Rightarrow \\quad\n",
    "x = 0.9,\\; y = 0.8\n",
    "\\]\n",
    "$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f50d8bc-81c4-40d2-9df0-59ad5f5e53a9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6b14980a-30fd-4de5-9fdf-3bb75fa370a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "해: [0.9 0.8]\n",
      "x = 0.9, y = 0.8\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "# 계수 행렬 A\n",
    "A = np.array([[2, 4],\n",
    "              [6, 2]])\n",
    "\n",
    "# 상수 벡터 B\n",
    "B = np.array([5, 7])\n",
    "\n",
    "# 해 구하기 (X = A^{-1}B)\n",
    "X = np.linalg.solve(A, B)\n",
    "\n",
    "print(\"해:\", X)\n",
    "print(f\"x = {X[0]}, y = {X[1]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8944f439-9bb9-4ff1-8b72-7a6bd13aac54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2*0.9+3*0.8 - 5 < 0.001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1b831bd0-e421-4b9d-aeea-23030e87a567",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  3,  5],\n",
       "       [ 3,  4,  6],\n",
       "       [-1,  3,  5]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x1 = np.array( [[1,3,5],\n",
    "              [3,4,6],\n",
    "              [-1,3,5]])\n",
    "x1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16940fe4-ffe9-47bf-89b2-37e63c309fcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 5.00000000e-01, -5.92118946e-16, -5.00000000e-01],\n",
       "       [-5.25000000e+00,  2.50000000e+00,  2.25000000e+00],\n",
       "       [ 3.25000000e+00, -1.50000000e+00, -1.25000000e+00]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xy= np.linalg.inv(\n",
    "    [ [1,3,5],\n",
    "     [3 ,4, 6],\n",
    "     [-1,3,5]]\n",
    ")\n",
    "xy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b2248869-1211-404c-ad35-bc960c514c63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.00000000e+00, -6.66133815e-16, -6.66133815e-16],\n",
       "       [ 0.00000000e+00,  1.00000000e+00, -4.44089210e-16],\n",
       "       [-1.77635684e-15,  1.11022302e-15,  1.00000000e+00]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xy = np.linalg.inv(x1)\n",
    "result = np.dot(x1,xy)\n",
    "result "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "42af0274-1b05-43c2-9257-fffeb8f62360",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid decimal literal (1815234328.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[6], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    3x + 4y + 6z =11\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid decimal literal\n"
     ]
    }
   ],
   "source": [
    "3x + 4y + 6z =11\n",
    "-x +2y +z=3\n",
    "2x -3y+9z =11\n",
    "이것을 아까 코드를 참조해서 행렬로변환\n",
    "y1= np.array([[ 3,4,6],[-1,2,1] ,[2,-3,9]])\n",
    "inv_y1= np.linalg.inv(y1)\n",
    "result_identity = np.dot(y1,inv_y1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b368da11-4baa-4d56-a012-428010975db9",
   "metadata": {},
   "outputs": [],
   "source": [
    "y1 = (\n",
    "    [\n",
    "        [1,3,5],\n",
    "        [3,4,6],\n",
    "        [-1,3,5]\n",
    "    ]\n",
    ")\n",
    "b = np.array([11,3,11])\n",
    "yy = np.linalg.inv(y1)\n",
    "result = np.dot(yy,y1)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a3163cf-f7de-4429-be5e-f74b633d1d2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "solution = np.dot(yy,b)\n",
    "np.round(solution,decimals=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fc07694-3a0f-46a0-a2e3-8447ecf6e638",
   "metadata": {},
   "outputs": [],
   "source": [
    "x11=0.\n",
    "x12= -25.5\n",
    "x13 = 17.5\n",
    "3*x11 + 4*x12 + 6*x13- 11 < 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f1bfa0-82c4-44cc-916a-2eb573917f3d",
   "metadata": {},
   "source": [
    "$ \\[\n",
    "f(x) = 3x^2 + 7x + 6\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "\\text{적분 구간: } \\int_{2}^{5} f(x)\\,dx\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "F(x) = \\int f(x)\\,dx \n",
    "= x^3 + \\tfrac{7}{2}x^2 + 6x\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "\\int_{2}^{5} f(x)\\,dx\n",
    "= \\Bigl[ x^3 + \\tfrac{7}{2}x^2 + 6x \\Bigr]_{2}^{5}\n",
    "= \\Bigl(125 + \\tfrac{7}{2}\\cdot 25 + 30 \\Bigr) - \\Bigl(8 + \\tfrac{7}{2}\\cdot 4 + 12 \\Bigr)\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "= 188.5 - (-19) = \\tfrac{417}{2} = 208.5\n",
    "\\]\n",
    "\n",
    "\\[\n",
    "\\therefore \\quad \\text{정확한 면적은 } 208.5\n",
    "\\]$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edbf4937-7b01-42ac-80b8-029aa5e47598",
   "metadata": {},
   "source": [
    "$  f(x) = 3x^2 + 7x + 6  $\n",
    "\n",
    " $ \\text{적분 구간: } \\int_{2}^{5} f(x)\\,dx  $\n",
    " $ F(x) = \\int f(x)\\,dx \n",
    "= x^3 + \\tfrac{7}{2}x^2 + 6x  $"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "912faa2e-872a-412a-ae81-7e60cc15766a",
   "metadata": {},
   "source": [
    "$ \\int_{2}^{5} f(x)\\,dx\n",
    "= \\Bigl[ x^3 + \\tfrac{7}{2}x^2 + 6x \\Bigr]_{2}^{5}\n",
    "= \\Bigl(125 + \\tfrac{7}{2}\\cdot 25 + 30 \\Bigr) - \\Bigl(8 + \\tfrac{7}{2}\\cdot 4 + 12 \\Bigr)   $"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b78e84e-ecd6-4ac7-b722-9870ca3cf3d5",
   "metadata": {},
   "source": [
    " $  = 188.5 - (-19) = \\tfrac{417}{2} = 208.5 $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5ff1e44-4360-4005-a6ce-adf3eaa00c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import sympy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ---- SymPy 적분 ----\n",
    "x = sp.Symbol('x', real=True)\n",
    "f = 3*x**2 + 7*x + 6\n",
    "a, b = 2, 5\n",
    "\n",
    "F = sp.integrate(f, x)                 # 부정적분\n",
    "area_exact = sp.integrate(f, (x, a, b))  # [2,5] 구간 면적\n",
    "\n",
    "print(\"부정적분 F(x) =\", F)\n",
    "print(f\"정확한 면적 ∫_{{{a}}}^{{{b}}} f(x) dx =\", area_exact)\n",
    "\n",
    "# ---- 리만합 직사각형 ----\n",
    "N = 8   # 직사각형 개수\n",
    "dx = (b - a) / N\n",
    "xs = np.linspace(a, b, 400)\n",
    "f_np = sp.lambdify(x, f, 'numpy')\n",
    "\n",
    "# midpoint rule\n",
    "sample_x = np.linspace(a + dx/2, b - dx/2, N)\n",
    "heights = f_np(sample_x)\n",
    "riemann_sum = np.sum(heights * dx)\n",
    "\n",
    "# ---- 시각화 ----\n",
    "plt.figure(figsize=(8, 5))\n",
    "plt.plot(xs, f_np(xs), 'orange', label='f(x) = 3x^2+7x+6')\n",
    "\n",
    "for xi, hi in zip(sample_x, heights):\n",
    "    plt.bar(xi, hi, width=dx, alpha=0.3, edgecolor='black')\n",
    "\n",
    "plt.axvline(a, linestyle='--', alpha=0.6)\n",
    "plt.axvline(b, linestyle='--', alpha=0.6)\n",
    "\n",
    "plt.title(f\"적분 구간 [{a},{b}] Midpoint Riemann Sum (N={N})\\n\"\n",
    "          f\"리만합 ≈ {riemann_sum:.6f},  정확한 면적 = {float(area_exact):.6f}\")\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('f(x)')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc6b4b29-1fa5-44ed-b3e3-b704f5eb57af",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sympy as sp\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# ---- SymPy 적분 ----\n",
    "x = sp.Symbol('x', real=True)\n",
    "f = 3*x**2 + 7*x + 6\n",
    "a, b = 2, 5\n",
    "\n",
    "F = sp.integrate(f, x)                 # 부정적분\n",
    "area_exact = sp.integrate(f, (x, a, b))  # [2,5] 구간 면적\n",
    "\n",
    "print(\"부정적분 F(x) =\", F)\n",
    "print(f\"정확한 면적 ∫_{{{a}}}^{{{b}}} f(x) dx =\", area_exact)\n",
    "\n",
    "# ---- 반복문으로 여러 개수의 직사각형 ----\n",
    "rect_counts = [2, 3, 7, 10, 100]\n",
    "\n",
    "xs = np.linspace(a, b, 400)\n",
    "f_np = sp.lambdify(x, f, 'numpy')\n",
    "\n",
    "# subplot을 2행 3열로 준비 (최대 6개까지)\n",
    "fig, axes = plt.subplots(2, 3, figsize=(15, 10))\n",
    "axes = axes.flatten()\n",
    "\n",
    "for idx, N in enumerate(rect_counts):\n",
    "    dx = (b - a) / N\n",
    "    sample_x = np.linspace(a + dx/2, b - dx/2, N)  # midpoint rule\n",
    "    heights = f_np(sample_x)\n",
    "    riemann_sum = np.sum(heights * dx)\n",
    "\n",
    "    ax = axes[idx]\n",
    "    ax.plot(xs, f_np(xs), 'orange', label='f(x) = 3x^2+7x+6')\n",
    "\n",
    "    # 직사각형 그리기\n",
    "    for xi, hi in zip(sample_x, heights):\n",
    "        ax.bar(xi, hi, width=dx, alpha=0.3, edgecolor='black')\n",
    "\n",
    "    ax.axvline(a, linestyle='--', alpha=0.6)\n",
    "    ax.axvline(b, linestyle='--', alpha=0.6)\n",
    "\n",
    "    ax.set_title(f\"N={N} 직사각형\\n\"\n",
    "                 f\"리만합 ≈ {riemann_sum:.4f}, 정확한 면적 = {float(area_exact):.4f}\")\n",
    "    ax.set_xlabel('x')\n",
    "    ax.set_ylabel('f(x)')\n",
    "    ax.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "656fcb80-1d1a-432d-9269-12918793baf7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sympy as sp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# 변수 선언\n",
    "x = sp.Symbol('x', real=True)\n",
    "\n",
    "# 함수 정의\n",
    "f = sp.sin(2*x)*sp.cos(3*x) + x**7 + sp.cos(8*x)\n",
    "\n",
    "# 미분\n",
    "f_prime = sp.diff(f, x)\n",
    "\n",
    "print(\"원래 함수 f(x) =\", f)\n",
    "print(\"도함수 f'(x) =\", f_prime)\n",
    "\n",
    "# numpy 변환\n",
    "f_np = sp.lambdify(x, f, 'numpy')\n",
    "f_prime_np = sp.lambdify(x, f_prime, 'numpy')\n",
    "\n",
    "# x 범위\n",
    "xs = np.linspace(-2, 2, 400)   # 필요시 범위 조정\n",
    "ys = f_np(xs)\n",
    "ys_prime = f_prime_np(xs)\n",
    "\n",
    "# 그래프\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(xs, ys, label=\"f(x)\", color=\"blue\")\n",
    "plt.plot(xs, ys_prime, label=\"f'(x)\", color=\"red\", linestyle=\"--\")\n",
    "\n",
    "plt.title(\"함수와 도함수 그래프\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb7097b1-7e34-4d9a-be68-3bee6683721e",
   "metadata": {},
   "source": [
    "<img src=\"C:/Users/Administrator/a.png\">"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
